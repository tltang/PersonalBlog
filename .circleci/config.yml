# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

commands:
  print_pipeline_id:
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}
  print_pipeline_id2:
    parameters:
      id:
        type: string
    steps:
      - run: echo << parameters.id >>    
# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  say-hello:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
        environment:
          myName: Lisa
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout
      - print_pipeline_id
      - print_pipeline_id2:
          id: << pipeline.id >>
      - run:
          name: "Say hello"
          command: echo 'Hello, World!' > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt         

  say-hello1:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      - image: cimg/base:stable
        environment:
          myName: Lisa
    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - attach_workspace:
          at: ~/
      - checkout
      - run:
          name: "Say hello1"
          command: cat ~/output.txt
      - run:
          name: "Return on Error"
          command: echo "Hello Error!"
          when: on_fail

  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
              --template-file template.yaml \
              --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
              --region us-east-1

  configure_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d5:e5:98:f0:23:1d:89:9a:6a:7a:9b:17:c5:8a:d9:c3"]
      - run:
          name: Install Ansible
          command: |
            # Install Ansible
            apk add --update ansible
      - run:
          name: Run Playbook and Configure server
          command: |
            # Your command
            ansible-playbook -i inventory.txt main.yml

  # Exercise: Smoke Testing
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  say-hello-workflow:
    jobs:
      - say-hello
      - say-hello1:
          requires:
            - say-hello
      - smoke_test:
          requires:
            - say-hello1
#      - create_infrastructure:
#         requires:
#           - say-hello1
#      - configure_infrastructure:
#          requires:
#            - say-hello1

      
